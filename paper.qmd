---
title: "Writing a reproducible paper with RStudio and Quarto"
author:
  - name: Paul C. Bauer
    orcid: 0000-0002-8382-9724
    email: mail@paulcbauer.de
    affiliations:
      - name: Mannheim Centre for European Social Research
  - name: Camille Landesvatter
    orcid: 0000-0003-0156-5364
    email: camille.landesvatter@uni-mannheim.de
    affiliations:
      - name: Mannheim Centre for European Social Research
format:
  html:
    toc: true
    toc_float: true
    toc_depth: 2
    number_sections: true
    code_folding: hide
    theme: readable
  pdf:
    number-sections: true
    colorlinks: true
    keeptex: true
    include-in-header: 
      text: |
        \usepackage{booktabs}
        \usepackage{siunitx}
        \newcolumntype{d}{S[
            input-open-uncertainty=,
            input-close-uncertainty=,
            parse-numbers = false,
            table-align-text-pre=false,
            table-align-text-post=false
         ]}
date: 'last-modified'
date-format: '[This version:] MMMM D, YYYY [<br>(First version: February  16, 2023)]'
abstract: 'This paper provides a template to write a reproducible scientific paper with RStudio and Quarto. It falls into a series of other templates, namely using RMarkdown [@Bauer2018-dl] (see [here](https://osf.io/k8jhx/)) and Pagedown [@Bauer2021-dl] (see [here](https://osf.io/q395s)). Below we outline some of the "tricks"/code (e.g., referencing tables, sections etc.) we had to figure out to produce this document. The underlying files which produce this document can be [downloaded here](https://github.com/paulcbauer/Writing_a_reproducable_paper_with_quarto/) (click on ![](githubcode.png) $\Rightarrow$ **Download ZIP**). We are convinced that in the future there will be many improvements and developments with regards to RStudio and Quarto. We intend to update this file when we discover more convenient code. You can follow any updates on the [github repository](https://github.com/paulcbauer/Writing_a_reproducable_paper_with_quarto/). To compile this PDF document please first read @sec-prerequisites.'
bibliography: references.bib
csl: american-sociological-association.csl
tbl-cap-location: top
number-sections: true
execute:
  echo: false
  warning: false
  message: false
  cache: false
editor:
  mode: source
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(cache = FALSE)
# Use cache = TRUE if you want to speed up compilation

knitr::opts_knit$set(output.format = "html")  # Set to "html" for HTML output

# A function to allow for showing some of the inline code
rinline <- function(code){
  html <- '<code  class="r">``` `r CODE` ```</code>'
  sub("CODE", code, html)
}
```

# Why reproducible research (in R)?

Some arguments...

-   **Access**: Research is normally funded by taxpayers (researchers are also taxpayers). Hence, it should be freely accessible to everyone without any barriers, e.g., without requiring commercial software. Importantly, researchers from developing countries are even more dependent on free access to knowledge [@Kirsop2005-ro].

-   **Reproducibility**: Even if you have written a study and analyzed the data yourself you will forget what you did after a few months. A fully reproducible setup will help you to trace back your own steps. Obviously, the same is true for other researchers who may want to understand your work and built on it. It may sound like a joke but why not aim for a document that can be used to reproduce your findings in 500 years.

-   **Errors**: Manual steps in data analysis (e.g., manually copy/pasting values into a table etc.) may introduce errors. Quarto allows you to **automatize** such steps and/or avoid them.

-   **Revisions**: Revising a paper takes much less time if you have all the code you need in one place, i.e., one `.qmd` file. For instance, if you decide to exclude a subset of your data you simply need to insert one line of your code at the beginning and everything is rebuilt/re-estimated automatically.


# Why Quarto?

[Quarto](https://quarto.org/) is an open-source, scientific and technical publishing system build on `pandoc`. Their creators from RStudio also call it [â€žthe next generation of R Markdown"](https://quarto.org/docs/computations/r.html).\
Like RMarkdown, Quarto uses `Knitr` to execute `R` code, and is therefore able to render most existing `.rmd` files without having to make any adjustments. As in `rmd` and other more recent developments like R's `pagedown`-package, one of the main goals of Quarto is to weave together narrative text and code and produce nicely formatted output documents.\
Differences to RMarkdown are not only but especially due to two facts: first, Quarto is multi-lingual (R, Python, Julia, Observable JS, etc.) and second in addition to RMarkdown's workflow where the final conversion layer uses `pandoc` to create documents, Quarto uses pandoc with Lua filters (which include latex in pandoc metadata). This contributes to cross-language standardization of outputs. Put differently, it allows working regardless of language, since it allows shared syntax and shared format across languages and input formats.

# Prerequisites and installation {#sec-prerequisites}

Quarto is a multi-language, next-generation version of R Markdown from RStudio. Multi-language means you can use R, Python, Julia and other languages to create quarto documents. In this template we'll focus on showing you how to use **RStudio with Quarto**.

We assume that you are familiar with using R and R Markdown. If you don't know what R Markdown is there are many great resources that you can use (e.g. watch this [short video](https://vimeo.com/178485416)). An older template of ours [see @Bauer2018-dl] ([https://osf.io/q395s](https://osf.io/q395s)) may provide a quick entry point to writing a reproducible manuscript with R Markdown and Latex. To further deepen your understanding of the different components underlying this template, go on and learn about R, [Markdown](https://en.wikipedia.org/wiki/Markdown), [R Markdown](https://rmarkdown.rstudio.com/lesson-1.html) and [Quarto](https://quarto.org/). For more information on Quarto also consider reading their [FAQ](https://quarto.org/docs/faq/rmarkdown.html).

Like R Markdown, Quarto uses `Knitr` to execute R code (hence you should also be able to render existing Rmd files without modification), and can render documents of a dozens of formats (e.g., PDF, HTML). For a comprehensive overview watch [this video](https://www.youtube.com/watch?v=yvi5uXQMvu4&t=708s&ab_channel=PositPBC) which is a record of a talk introducing `quarto` given by Tom Mock from RStudio.

To be able to compile the present document you need to follow the steps below:

1. Install [R](https://www.r-project.org/) and [Rstudio](https://posit.co/download/rstudio-desktop/) (important: most recent versions, e.g. RStudio v2022.07) [@R2017; @Rstudio2015].
2. Install [tinytex](https://yihui.name/tinytex/), a lightweight version of Tex Live [@markdown2017; @tinytex] in order to compile PDFs using the code below.

```{r eval=F, echo=T}
install.packages('tinytex')
tinytex::install_tinytex()
```

3. Install the "rmarkdown"-package [@markdown2017] and the other packages [@knitr1; @knitr2; @knitr3; @kableextra; @modelsummary; @gt] using the code below. The `p_load` function from the `pacman` package tries to load a package, if not installs and loads it.

```{r eval=T, echo=T}
# Check if pacman is installed if not install
if (!require("pacman")) install.packages("pacman")

# Install/load packages if not present
pacman::p_load(
  rmarkdown,
  kableExtra,
  modelsummary,
  knitr,
  gt,
  gtsummary
)
```



4. Download the 5 input files we created (see below) from [github](https://github.com/paulcbauer/Writing_a_reproducable_paper_with_quarto/) (click on ![](githubcode.png) $\Rightarrow$ **Download ZIP**). Ignore/delete the other files.
-   `paper.qmd`: The underlying quarto markdown file.
-   `references.bib`: The bibliography file (*We use paperpile to manage references and export the `.bib` file into the folder that contains the `.qmd` file*)
-   `american-sociological-association.csl`: The file storing the bibliography style.
-   `data.csv`: Some raw data.
-   `githubcode.png`: The image file used in the abstract.
		
5. Finally store these files together in one folder (and use this folder as your working directory later on), close any open Rstudio instances and directly open `paper.qmd` with a new Rstudio instance. Doing so assures that the working directory is set to the folder that contains `paper.qmd` and the other files. Then click on "Render".[^1]

[^1]: You can always check your working directory in R with `getwd()`.


# Output files and the YAML header {#sec-basics-2}

Quarto allows you to produce documents in various formats (e.g., HTML, PDF, MS Word). By default, once you render the `paper.qmd` file in Rstudio it creates an output file in HTML called `paper.html`. However in the YAML you can specify any alternative format (or formats) alongside different options.

Remember (see @sec-prerequisites) that in order to compile PDFs you will need to install a recent distribution of LaTeX (e.g., TinyTex).

If you want your document to be rendered in multiple output formats (e.g., HTML and PDF, like we did here), you need to specify both outputs in your YAML header. Take `paper.qmd` (the underlying quarto file of this pdf) and have a look at the YAML (line #15 - #22) to see how to specify different outputs.

For instructions on how to render your final output document, please read @sec-compiling.

# Referencing within your document

To see how referencing works, simply see the different examples for figures, tables and sections below. For instance, in @sec-tables you can find different ways of referencing tables. `paper.qmd` (the underlying quarto file of this PDF) will show you how we referenced @sec-tables right here namely with '`@sec-tables`' whereas the corresponding section title was assigned the corresponding label '`# Tables {#sec-tables}`'. Pay attention that when using section cross-references, you need to enable the number-sections option in your YAML (line #22 of this `qmd` file).

# Software versioning

Software changes and gets updated, especially with an active developer community like that of R. Luckily you can always access [old versions of R](https://cran.r-project.org/bin/windows/base/old/) and old version of R packages in [the archive](https://cran.r-project.org/src/contrib/Archive/). In the archive you need to choose a particular package, e.g dplyr and search for the right version, e.g., `dplyr_0.2.tar.gz`. Then insert the path in the following function: `install.packages("https://....../dplyr_0.2.tar.gz", repos=NULL, type="source")`. Ideally, however, results will be simply reproducible in the most current R and package versions.

We would recommend to use the command below and simply add it to the appendix as we did here in Appendix @sec-rsessioninfo. This will make sure you always inform the reader about the package versions your relied on in your paper. For more advanced tools see [packrat](https://rstudio.github.io/packrat/).

``` {{r}}
#|label: fig-versioning
cat(paste("#", capture.output(sessionInfo()), "\n", collapse ="")) 
  # or use message() instead of cat()
```

```{r eval=F}
#|label: fig-versioning
cat(paste("#", capture.output(sessionInfo()), "\n", collapse ="")) 
  # or use message() instead of cat()
```

# Data

## Import

Generally, code is evaluated by inserting regular code chunks.

``` {{r}}
x <- 1:10
x
```

```{r}
x <- 1:10
x
```

Below we import an exemplary dataset (you can find `data.csv` in the [github repository]((https://github.com/paulcbauer/Writing_a_reproducable_paper_with_quarto/) with the other files).

``` {{r}}
#| echo=T
#| results="raw"
data <- read.csv("data.csv")
head(data)
```

```{r}
data <- read.csv("data.csv")
head(data)
```

## Putting your entire data into the .qmd file

Applying the function `dput()` to an object gives you the code needed to reproduce that object. So you could paste that code into your `.qmd` file if you don't want to have extra data files. This makes sense where data files are small.

``` {{r}}
dput(data[1:5,]) # here we only take a subset
```

```{r}
dput(data[1:5,]) # here we only take a subset
```

You can then insert the dput output in an rchunk in your `.qmd` as below.

``` {{r}}
data <- structure(list(Fertility = c(80.2, 83.1, 92.5, 85.8, 76.9), 
                       Agriculture = c(17, 45.1, 39.7, 36.5, 43.5), 
                       Examination = c(15L, 6L, 5L, 12L, 17L), 
                       Education = c(12L, 9L, 5L, 7L, 15L), 
                       Catholic = c(9.96, 84.84, 93.4, 33.77, 5.16), 
                       Infant.Mortality = c(22.2, 22.2, 20.2, 20.3, 20.6)), 
                       class = "data.frame", row.names = c(NA, -5L))
```

```{r}
data <- structure(list(Fertility = c(80.2, 83.1, 92.5, 85.8, 76.9),
                       Agriculture = c(17, 45.1, 39.7, 36.5, 43.5), 
                       Examination = c(15L, 6L, 5L, 12L, 17L), 
                       Education = c(12L, 9L, 5L, 7L, 15L), 
                       Catholic = c(9.96, 84.84, 93.4, 33.77, 5.16), 
                       Infant.Mortality = c(22.2, 22.2, 20.2, 20.3, 20.6)), 
                  class = "data.frame", row.names = c(NA, -5L))
```

# Tables {#sec-tables}

If you are creating a Quarto document for scientific purposes, you probably cannot avoid creating tables and cross-referencing those tables in your document. Below we show examples that use different R libraries. Importantly, we focus on tables that are customized for PDF output. Formatting text as PDF is probably one of the most widespread standards in the scientific community, especially when it comes to submitting papers and similar documents. However, where applicable we also mention libraries and code for HTML output.

## Tables with kable() and kable_styling()

A great function is `kable()` from the `knitr` package in combination with `kableExtra`. @tbl-1 provides such an example. To reference the table produced by the chunk you need to add `#| label: tbl-x` at the start of the chunk, i.e., `#| label: tbl-1` so that you can reference it by adding "`@tbl-1`" in your text. See below for the full chunk code.

``` {{r}}
#| label: tbl-1
#| tbl-cap: "Summary: Numeric variables"
library(knitr)
library(kableExtra)

knitr::kable(swiss[1:5,], row.names = TRUE, 
      caption = 'Table with kable() and kablestyling()',
      booktabs = T, format="simple") %>%
        kableExtra::kable_styling(full_width = T, 
                      latex_options = c("striped", 
                                        "scale_down",
                                        "HOLD_position"),
                      font_size = 11)
```

```{r}
#| label: tbl-1
#| tbl-cap: "Summary: Numeric variables"
library(knitr)
library(kableExtra)

knitr::kable(swiss[1:5,], row.names = TRUE, 
      caption = 'Table with kable() and kablestyling()', 
      booktabs = T, format="simple") %>% 
        kableExtra::kable_styling(full_width = T, 
                      latex_options = c("striped", 
                                        "scale_down",
                                        "HOLD_position"),
                      font_size = 11)
```


## Tables with modelsummary

If you want to create well-formatted HTML output, consider learning about the `modelsummary` R package. `modelsummary` provides a variety of tables and plots to summarize statistical models and data in R. `modelsummary` plots and tables are highly customizable and they can be saved to almost all formats, e.g., HTML, PDF and Markdown. This makes it especially easy to embed them in dynamic documents. Please look at the package's extensive [documentation](https://vincentarelbundock.github.io/modelsummary/index.html) where they also show examples for almost any plot or table you might be looking for. In this template we demonstrate an example for modelsummary's `datasummary` function. `Datasummary` creates frequency tables, crosstab tables, correlation tables, balance tables and many **more**.

### Summarize numeric variables with modelsummary

@tbl-2 shows a summary table for numeric variables.

``` {{r}}
#| label: tbl-2
#| tbl-cap: "Summary: Numeric variables"
library(modelsummary)
datasummary_skim(swiss, 
                 type="numeric", 
                 histogram=F,
                 output="flextable") %>% 
  # column widths
  flextable::autofit()
```

```{r}
#| label: tbl-2
#| tbl-cap: "Summary: Numeric variables"

library(modelsummary)
datasummary_skim(swiss, 
                 type="numeric", 
                 histogram=F, 
                 output= "flextable") %>% 
  # column widths
  flextable::width(1, width = 1) %>% 
  flextable::width(2:8, width = 0.5)

  


```

### Summarize categorical variables with modelsummary

@tbl-3 shows a summary table for categorical variables. Notice how for this table we also changed the font to be "Times New Roman".

``` {{r}}
#| label: tbl-3
#| tbl-cap: "Summary: Categorical variables"
# Create categorical variables
swiss$Education_cat <- cut(swiss$Education, 
                   breaks=c(-Inf, 6, 12, Inf), 
                   labels=c("low","middle","high"))
swiss$Infant.Mortality_cat <- cut(swiss$Infant.Mortality, 
                   breaks=c(-Inf, 18.15, 21.70, Inf), 
                   labels=c("low","middle","high"))

library(flextable)
tab_cat <- datasummary_skim(swiss, 
                            type="categorical", 
                            output = 'flextable') 

# additionally we want to change the font, fontsize and spacing
library("gdtools")

library(dplyr)
tab_cat <- tab_cat %>%
  font(fontname="Times New Roman", part="header") %>%
  font(fontname="Times New Roman", j=1:4) %>% 
  fontsize(size=12, part="header") %>%
  fontsize(size=10, j=1:4) %>% 
  line_spacing(space = 0.3, part = "all") %>% 
  # column widths
  flextable::autofit()

tab_cat
```

```{r}
#| label: tbl-3
#| tbl-cap: "Summary: Categorical variables"

# Create categorical variables
swiss$Education_cat <- cut(swiss$Education, 
                   breaks=c(-Inf, 6, 12, Inf), 
                   labels=c("low","middle","high"))
swiss$Infant.Mortality_cat <- cut(swiss$Infant.Mortality, 
                   breaks=c(-Inf, 18.15, 21.70, Inf), 
                   labels=c("low","middle","high"))

library(flextable)
tab_cat <- datasummary_skim(swiss, 
                            type="categorical", 
                            output = 'flextable')

#additionally we want to change the font, fontsize and spacing
library("gdtools")

library(dplyr)
tab_cat <- tab_cat %>%
  font(fontname="Times New Roman", part="header") %>%
  font(fontname="Times New Roman", j=1:4) %>%
  fontsize(size=12, part="header") %>%
  fontsize(size=12, j=1:4) %>%
  line_spacing(space = 0.3, part = "all") %>% 
  # column widths
  flextable::autofit()
  

tab_cat
```


### Regression table with modelsummary

@tbl-4 shows the output for a regression table. Make sure you name all the models you estimate with unique identifiers (even if its 50 models) and explicitly refer to model names (M1, M2 etc.) in the text.

``` {{r}}
#| label: tbl-4
#| tbl-cap: "Linear regression with modelsummary"
#| results: "asis"

library(modelsummary)
M1 <- lm(Fertility ~ Education + Agriculture, data = swiss)
M2 <- lm(Fertility ~ Education + Catholic, data = swiss)
M3 <- lm(Fertility ~ Education + Infant.Mortality + Agriculture, data = swiss)
models <- list("M1" = M1, "M2" =  M2, "M3" = M3)


library(gt)
library(gtsummary)
# additionally we want to change the font, font size and spacing
modelsummary(models,
             output = 'gt',
             notes = "Notes: some notes...") %>%
    tab_spanner(label = 'Dependent variable: Fertility', columns = 2:4) %>%
  tab_options(
    table.font.size = 10,
    data_row.padding = px(1),
    table.border.top.color = "white",
    heading.border.bottom.color = "black",
    row_group.border.top.color = "black",
    row_group.border.bottom.color = "white",
    table.border.bottom.color = "white",
    column_labels.border.top.color = "black",
    column_labels.border.bottom.color = "black",
    table_body.border.bottom.color = "black",
    table_body.hlines.color = "white"
  )

# Produce right output depending on format (html vs. latex)
if(knitr::is_html_output()){table4}else
    {table4 %>% gt::as_latex() %>% 
    as.character() %>% 
    gsub("\\(Intercept\\)", "Intercept", .) %>% 
    cat()}
```

```{r}
#| label: tbl-4
#| tbl-cap: "Linear regression with modelsummary"
#| results: "asis"
library(modelsummary)
M1 <- lm(Fertility ~ Education + Agriculture, data = swiss)
M2 <- lm(Fertility ~ Education + Catholic, data = swiss)
M3 <- lm(Fertility ~ Education + Infant.Mortality + Agriculture, data = swiss)
models <- list("M1" = M1, "M2" =  M2, "M3" = M3)

library(gt)
library(gtsummary)
# additionally we want to change the font, font size and spacing
table4 <- modelsummary(models,
             output = 'gt',
             stars = TRUE,
             notes = "Notes: put some notes here...",
             threeparttable = TRUE) %>%
    tab_spanner(label = 'Dependent variable: Fertility', columns = 2:4)

if(knitr::is_html_output()){table4}else
    {table4 %>% 
    gt::as_latex() %>% 
    as.character() %>% 
    gsub("\\(Intercept\\)", "Intercept", .) %>% 
    cat()}
```

# Inline code & results

Reproduction reaches new heights when you work with inline code. For instance, you can automatize the display of certain coefficients within the text. An example is to include estimates, e.g., the coefficient of `dist` of the model we ran above. `r rinline("round(coef(M1)[2], 2)")` will insert the coefficient as follows: `r round(coef(M1)[2], 2)`. Or `r rinline("3 + 7")` will insert a `r 3 + 7` in the text.\
Inline code/results that depend on earlier objects in your document will automatically be updated once you change those objects. For instance, imagine a reviewer asks you to omit certain observations from your sample. You can simply do so in the beginning of your code and push play subsequently. At time you might have to set `cache = FALSE` at the beginning so that all the code chunks are rerun.\
Researchers often avoid referring to results in-text etc. because you easily forget to change them when revising a manuscript. At the same it can make an article much more informative and easier to read, e.g., if you discuss a coefficient in the text you can directly show it in the section in which you discuss it. Inline code allows you to do just that. R Markdown allows you to that do so in a reproducible and automatized manner.

# Graphs

## R base graphs

A fully reproducible manuscript would create diagrams directly in the `.qmd` file and insert them in the appropriate place. It's relatively simple to insert R base graphs as you can see in @fig-1.

``` {{r}}
#| label: fig-1
#| fig-cap: "Scatterplot of Speed and Distance"
plot(swiss$Catholic, swiss$Fertility)
```

```{r}
#| label: fig-1
#| fig-cap: "Scatterplot of Speed and Distance"
plot(swiss$Catholic, swiss$Fertility)
```

## ggplot2 graphs

Below in @fig-2 we also show a example with R's `ggplot2` package.

``` {{r}}
#| label: fig-2
#| fig-cap: "Miles per gallon according to the weight"
library(ggplot2)
plot <- ggplot(swiss, aes(x=Catholic, y=Fertility, shape=Education_cat)) +
        geom_point() +
        labs(x="Agriculture", y = "Fertility", shape="Education") +
        theme_classic()
plot
```

```{r fig-2, fig.align="center", fig.pos="H", fig.width=6, fig.height=3}
#| label: fig-2
#| fig-cap: "Fertility and Agriculture by Education"
library(ggplot2)
plot <- ggplot(swiss, aes(x=Catholic, y=Fertility, shape=Education_cat)) +
  geom_point() +
  labs(x="Agriculture", y = "Fertility", shape="Education") +
  theme_classic()
plot
```

# Compiling/rendering the document {#sec-compiling}

Eventually you have two options on how to render/compile/knit your document:

-   first, use the Render Button in R Studio. If you click it without using the drop down menu, by default it will create HTML since it is the first format listed in our YAML. Always remember to specify your desired output formats in your YAML (as described in @sec-basics-2) If you use the drop down menu of the "Render"-button, you can specify the desired output (e.g., HTML or PDF) but only if you specified it in your YAML.

-   second, if you are not using RStudio and/or you prefer to render from the R console, use the `quarto` package to render to all formats at the same time with the `quarto_render()` function:

``` {{r}}
quarto::quarto_render()
```

```{r eval=F}
quarto::quarto_render()
```

Beforehand don't forget to install the `quarto` package [@quarto]:

``` {{r}}
install.packages("quarto")
```

```{r eval=F}
install.packages("quarto")
```

Here you can again specify the name of the resulting document as well as the desired output format(s):

``` {{r}}
quarto::quarto_render(
  "paper.qmd", 
  output_format = c("pdf", "html")
)
```

```{r eval=F}
quarto::quarto_render(
  "paper.qmd", 
  output_format = c("pdf", "html")
)
```

Your output(s) will be saved in your working directory.

# Good practices for reproducibility

Every researcher has his own optimized setup. Currently we would recommend the following:

-   Keep all files of your project (that matter for producing the PDF) in one folder without subfolders. You can zip and directly upload that folder to the [Harvard dataverse](https://dataverse.harvard.edu/).[^2]
-   Make sure that filenames have a logic to them.
    -   Main file with text/code: "paper.qmd", "report.qmd"
    -   Data files: "data_xxxxxx.\*"
    -   Image files: "fig_xxxxxx.\*"
    -   Tables files: "table_xxxx.\*"
    -   etc.
    -   Ideally, your filenames will correspond to the names in the paper. For instance, Figure 1 in the paper may have a corresponding file called `fig_1_xxxxx.pdf`.
-   Use the document outline in R studio (Ctrl + Shift + O) when you work with R Markdown.
-   Name rchunks according to what they do or produce:
    -   "`fig-...`" for chunks producing figures
    -   "`table-...`" for chunks producing tables
    -   "`model-...`" for chunks producing model estimates
    -   "`import-...`" for chunks importing data
    -   "`recoding-...`" for chunks in which data is recoded
-   Use "really" informative variable names:
    -   Q: What do you think does the variable *trstep* measure? It actually measures trust in the European parliament.
        -   How could we call this variable instead? Yes, `trust.european.parliament` which is longer but will probably be understood by another researcher in 50 years.
    -   If your setup is truly reproducible you will probably re-use the variable names that you generate as variable names in the tables you produce. Hence, there is an incentive to use good names.
-   Use unique identifiers in the final R Markdown document paper.qmd that you upload:
    -   Think of someone who wants to produce Figure 1/Model 1/Table 1 in your paper but doesn't find it in your code...
        -   Name the chunks "fig-1", "fig-2" as the are named in the published paper.
        -   Name the chunks that produce tables "table-1", "table-2" etc. as they are named in the published paper.
        -   Name your statistical models in your R code "M1", "M2" as they are named in the published paper.

[^2]: Another good folder setup would be to store all files needed as input files for the R Markdown manuscript in a subfolder called "input" and all output files that are produced apart from paper.html and paper.pdf in a subfolder called "output".

# Additional tricks for publishing

-   Make your script anonymous
    -   Simply put a `<!-- ... -->` around any identifying information, e.g., author names, title footnote etc.
-   Counting words
    -   Use adobe acrobat (commerical software) to convert your file to a word file. Then open in word and delete all the parts that shouldn't go into the word count. The word count is displayed in the lower right.
    -   Use an one of the online services to count your words (search for "pdf word count")
-   Appendix: You can change the numbering format for the appendix in the `.qmd` file
    -   What is still not possible in this document is to automatically have separate reference sections for paper and appendix.
-   Journals may require you to use their tex style: Sometimes you can simply use their template in your rmarkdown file. See [here](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/LDUMNY) for a PLOS one example.

# Citation styles

If your study needs to follow a particular citation style, you can set the corresponding style in the header of your `.qmd` document. To do so you have to download the corresponding `.csl` file.

In the present document we use the style of the American Sociological Association and set it in the preamble with `csl: american-sociological-association.csl`. However, you also need to download the respective `.csl` file from the following github page: https://github.com/citation-style-language/styles and copy it into your working directory for it to work.

The github directory contains a wide variety of citation style files depending on what discipline you work in.

Also read [quarto's official documentation](https://quarto.org/docs/authoring/footnotes-and-citations.html) about Citations and Footnotes.

\newpage

# References {.unnumbered}

::: {#refs}
:::

<!--  to generate a citation entry for BibTeX, you can pass the returned object of citation() to toBibtex(), e.g. toBibtex(citation("xaringan")). Then  copy the output to a .bib file and add a unique citation key -->

<!-- https://bookdown.org/yihui/rmarkdown-cookbook/write-bib.html -->

\newpage

# Online appendix {.unnumbered}

## Attach R session info in appendix {#sec-rsessioninfo}

Since R and R packages are constantly evolving you might want to add the R session info that contains information on the R version as well as the packages that are loaded.

```{r echo=FALSE}
print(sessionInfo(), local = FALSE)
```

## All the code in the paper

To simply attach all the code you used in the PDF file in the appendix see the R chunk in the underlying `.qmd` file:

```{r, ref.label=knitr::all_labels(),echo=TRUE,eval=FALSE}
```

